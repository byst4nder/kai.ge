<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 凯哥的个人网站</title>
    <link>https://kai.ge/posts/</link>
    <description>Recent content in Posts on 凯哥的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 22 Aug 2019 20:19:23 +0800</lastBuildDate>
    
	<atom:link href="https://kai.ge/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>不懂不写系列：EventLoop事件循环macrotask和microtask终结篇</title>
      <link>https://kai.ge/posts/%E4%B8%8D%E6%87%82%E4%B8%8D%E5%86%99%E7%B3%BB%E5%88%97macrotask%E5%92%8Cmicrotask%E7%BB%88%E7%BB%93%E7%89%88/</link>
      <pubDate>Thu, 22 Aug 2019 20:19:23 +0800</pubDate>
      
      <guid>https://kai.ge/posts/%E4%B8%8D%E6%87%82%E4%B8%8D%E5%86%99%E7%B3%BB%E5%88%97macrotask%E5%92%8Cmicrotask%E7%BB%88%E7%BB%93%E7%89%88/</guid>
      <description>经常看到下面这样的一个例子： console.log(&#39;script start&#39;); setTimeout(function() { console.log(&#39;setTimeout&#39;); }, 0); Promise.resolve().then(function() { console.log(&#39;promise1&#39;); }).then(function() { console.log(&#39;promise2&#39;); }); console.log(&#39;script end&#39;); 如果你不能立马得出答案，或则模棱两可的猜测执行过程，那你肯定没有理解清楚JS的事件循环机制，也就是常常听到的Event Loop。其实理解清楚</description>
    </item>
    
    <item>
      <title>非富文本小程序处理文本字符串加颜色和换行</title>
      <link>https://kai.ge/posts/%E9%9D%9E%E5%AF%8C%E6%96%87%E6%9C%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%A0%E9%A2%9C%E8%89%B2%E5%92%8C%E6%8D%A2%E8%A1%8C/</link>
      <pubDate>Fri, 16 Aug 2019 16:20:22 +0800</pubDate>
      
      <guid>https://kai.ge/posts/%E9%9D%9E%E5%AF%8C%E6%96%87%E6%9C%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%A0%E9%A2%9C%E8%89%B2%E5%92%8C%E6%8D%A2%E8%A1%8C/</guid>
      <description>文本字符串示例： let str = &#39;活动规则文案活动规则&amp;lt;b&amp;gt;文案活动&amp;lt;/b&amp;gt;规则换行\n文案活动规则文案活动规则文案活动规则换行\n文案活动规则文案&amp;lt;b&amp;gt;重点文案&amp;lt;/b</description>
    </item>
    
    <item>
      <title>Vuex概念浓缩版记录</title>
      <link>https://kai.ge/posts/vuex%E6%A6%82%E5%BF%B5%E6%B5%93%E7%BC%A9%E7%89%88%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 29 May 2019 20:20:22 +0800</pubDate>
      
      <guid>https://kai.ge/posts/vuex%E6%A6%82%E5%BF%B5%E6%B5%93%E7%BC%A9%E7%89%88%E8%AE%B0%E5%BD%95/</guid>
      <description>state 读取store的字段值,通过this.$store.state访问 const Counter = { template: `&amp;lt;div&amp;gt;{{ count }}&amp;lt;/div&amp;gt;`, computed: { count () { return this.$store.state.count } } } mapState 辅助函数 当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这</description>
    </item>
    
    <item>
      <title>上一次博客搬家</title>
      <link>https://kai.ge/posts/%E4%B8%8A%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%E6%90%AC%E5%AE%B6/</link>
      <pubDate>Sat, 09 Aug 2014 18:21:36 +0800</pubDate>
      
      <guid>https://kai.ge/posts/%E4%B8%8A%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%E6%90%AC%E5%AE%B6/</guid>
      <description>最终还是说出了这句再见，后会无期里面说道再见要说的用力一点，并且这是最后一次。 域名tashare.com 注册时间2011-08-06 过期时间2015-08-06 刚好三年过三天 由于考虑到本站存在的意义，</description>
    </item>
    
  </channel>
</rss>